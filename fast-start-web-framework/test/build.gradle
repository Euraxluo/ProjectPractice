plugins {
    id 'java'
}

group 'FSWFrame.euraxluo.cn'
version '2.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile(project(':framework'))//依赖我们的framework模块
    // https://mvnrepository.com/artifact/org.mybatis/mybatis
    compile group: 'org.mybatis', name: 'mybatis', version: '3.4.6'

    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'


    //tk.Mybatis generator集成示范
    // https://mvnrepository.com/artifact/tk.mybatis/mapper
    compile group: 'tk.mybatis', name: 'mapper', version: '3.3.9'

    // https://mvnrepository.com/artifact/org.mybatis/mybatis
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    // https://mvnrepository.com/artifact/tk.mybatis/mapper
    mybatisGenerator 'tk.mybatis:mapper:4.0.4'
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    mybatisGenerator 'mysql:mysql-connector-java:5.1.6'

}
jar{
    manifest{
        attributes "Main-Class":"cn.euraxluo.FSWFrame.Application" //申明主类
    }
    from{
        configurations.compile.collect{
            it.isDirectory() ? it : zipTree(it)
        }
    }
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}
